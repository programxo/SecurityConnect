@using System.ComponentModel.DataAnnotations
@using System.Net.Http
@using System.Text
@using System.Text.Json
@using SecurityConnect.Contracts.Authentication

@inject HttpClient Http
@inject ISnackbar Snackbar
@inject IDialogService Dialog

<h3>RegisterDialog</h3>

<!-- #region DIALOG: Register a new user -->

    <MudDialog IsVisible="true">
        @*<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />*@
    <DialogContent>
                <MudItem xs="12" sm="7">
                    <MudCard>
                        <MudCardContent>

                            <MudTextField Label="First name" Class="mt-3"
                            @bind-Value="FirstName" />

                            <MudTextField Label="Last name" Class="mt-3"
                            @bind-Value="LastName" />

                            <MudTextField Label="User name" HelperText="Max. 8 characters"
                            @bind-Value="UserName" />

                            <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                            @bind-Value="Password" InputType="InputType.Password" />

                            <MudTextField Label="Password" HelperText="Repeat the password" Class="mt-3"
                            @bind-Value="Password2" InputType="InputType.Password" />

                        </MudCardContent>
                        
                    </MudCard>
                    @*<ValidationSummary />*@
                </MudItem>

                <MudButton ButtonType="ButtonType.Submit"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           Class="ml-auto"
                @onclick="OnValidSubmit">Register</MudButton>

                <MudItem xs="12" sm="5">
                    <MudPaper Class="pa-4 mud-height-full">
                        <MudText Typo="Typo.subtitle2">@*Validation Summary*@</MudText>
                        @if (success)
                        {
                            <MudText Color="Color.Success">Success</MudText>
                        }
                        else
                        {
                            <MudText Color="@Color.Error">
                            </MudText>
                        }
                    </MudPaper>
                </MudItem>
                <MudItem xs="12">
                    <MudText Typo="Typo.body2" Align="Align.Center">
                        Fill out the form correctly to see the success message.
                    </MudText>
                </MudItem>
            </DialogContent>
        @*</EditForm>*@
    </MudDialog>
<!-- #endregion DIALOG: Register a new user -->

@code {
    [CascadingParameter]
    MudDialogInstance MudDailog { get; set; }

    void Submit() => MudDailog.Close(DialogResult.Ok(true));
    void Cancel() => MudDailog.Cancel();

    bool success;

    [Required]
    [StringLength(8, ErrorMessage = "Name length can't be more than 8.")]
    private string UserName { get; set; }

    [Required]
    [StringLength(30, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 8)]
    private string Password { get; set; }

    [Required]
    [Compare(nameof(Password))]
    private string Password2 { get; set; }

    [Required]
    [StringLength(15, ErrorMessage = "Name length can't be more than 15.")]
    private string FirstName { get; set; }

    [Required]
    [StringLength(15, ErrorMessage = "Name length can't be more than 15.")]
    private string LastName { get; set; }


    private async Task OnValidSubmit()
    {
        var request = new RegisterRequest(UserName, Password, FirstName, LastName);

        // Convert the request to JSON
        string json = JsonSerializer.Serialize(request);

        // Wrap the JSON in a StringContent object for the POST request
        HttpContent content = new StringContent(json, Encoding.UTF8, "application/json");

        // Send the POST request
        HttpResponseMessage response = await Http.PostAsync("https://localhost:7038/auth/register", content);

        if (response.IsSuccessStatusCode)
        {
            ChangePosition("Bottom-Center", Defaults.Classes.Position.BottomCenter, Severity.Success);
        }
        else
        {
            ChangePosition("Bottom-Center", Defaults.Classes.Position.BottomCenter, Severity.Error);
        }
    }

    void ChangePosition(string message, string position, Severity variant)
    {
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = position;

        var config = (SnackbarOptions options) =>
        {
            options.DuplicatesBehavior = SnackbarDuplicatesBehavior.Prevent;
        };

        Snackbar.Add(message, variant);
    }
}
